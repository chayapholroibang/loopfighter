<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable type="KIND_SpriteKind" id="*(1xCPfhb))HOesBk+A1">TimeTravelPlayer</variable><variable type="KIND_SpriteKind" id="HEk0s-?Q4rN`~KqRyF`8">Explosion</variable></variables><block type="pxt-on-start" id="($ln!q)=*4w/l:cJ%,Fb" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="FO)G5u~+dALJV[vvlhKg" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum ActionList{" line1="    UP, DOWN, LEFT, RIGHT, DESTROY" line2="}" numlines="3"></mutation><next><block type="typescript_statement" id="kCkU%q]eDnH%SXQJY5si" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="interface ActionTimestamp {" line1="    timestamp :number" line2="    action : ActionList" line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="CqN*x1jWkHq!WbHy(PW," editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class StoredPlayerActivity {" line1="    activities:ActionTimestamp[]" line2="    public constructor() {" line3="        this.activities = []" line4="    }" line5="    push(action:ActionList, timestamp:number) {" line6="        this.activities.push({" line7="            timestamp : timestamp, " line8="            action : action" line9="        })" line10="    }" line11="}" numlines="12"></mutation><next><block type="typescript_statement" id="COfwz6/`g[.FA]EQ/B5c" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class TimeTravelPlayer {" line1="    private playerSprite :Sprite" line2="    activities:ActionTimestamp[]" line3="    private destroyed : boolean" line4="    public constructor(storedPlayerActivity : StoredPlayerActivity) {" line5="        this.playerSprite = sprites.create(assets.image`OtherTimelineSpaceship`, SpriteKind.TimeTravelPlayer)" line6="        this.playerSprite.setFlag(SpriteFlag.StayInScreen, true)" line7="        this.playerSprite.x = 32" line8="        this.activities = storedPlayerActivity.activities" line9="    }" line10="    " line11="    public say(text:string) {" line12="        this.playerSprite.say(text)" line13="    }" line14="" line15="    public up() {" line16="        this.playerSprite.vx = 0" line17="        this.playerSprite.vy = -50" line18="    }" line19="    public down() {" line20="        this.playerSprite.vx = 0" line21="        this.playerSprite.vy = 50" line22="    }" line23="    public left() {" line24="        this.playerSprite.vx = -50" line25="        this.playerSprite.vy = 0" line26="    }" line27="    public right() {" line28="        this.playerSprite.vx = 50" line29="        this.playerSprite.vy = 0" line30="    }" line31="" line32="    public destroy(sayFarewall:boolean) {" line33="        if (sayFarewall) {" line34="            this.playerSprite.say(&quot;R to another timeline, keep fighting&quot;, 2000)" line35="        }" line36="        this.playerSprite.setFlag(SpriteFlag.Ghost, true)" line37="        animation.runImageAnimation(this.playerSprite, assets.animation`TimeWrapAnim`, 200)" line38="        this.playerSprite.vx = 0" line39="        this.playerSprite.vy = 0" line40="        this.destroyed = true" line41="    }" line42="" line43="    public fire() {" line44="        if (!this.destroyed) {" line45="            sprites.createProjectileFromSprite(assets.image`PlayerProjectiles`, this.playerSprite, 100, 0)" line46="        }" line47="        " line48="    }" line49="}" numlines="50"></mutation><next><block type="typescript_statement" id="@42SgdLgnX+=q`s[U=?z" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace engine {" line1="    " line2="    export enum STATUS  {" line3="        NORMAL, ENDGAME" line4="    }" line5="" line6="    let currentTimelineTimeStamp:number = 0;" line7="" line8="    let storedPlayerActivities : StoredPlayerActivity[] = []" line9="    let playersInOtherTimeline : TimeTravelPlayer[]" line10="    let currentPlayerActivityLogger : StoredPlayerActivity = null" line11="    let playerSprite :Sprite = null" line12="" line13="    let init = false" line14="    let destroyedUniverse = 0" line15="" line16="    let controlDisabled = false;" line17="" line18="    let _haltTime:number = -1" line19="" line20="    export let _status = STATUS.NORMAL" line21="" line22="    export function status() :STATUS {" line23="        return _status" line24="    }" line25="" line26="    export function engineTime() {" line27="        return _haltTime == -1 ? game.runtime() - currentTimelineTimeStamp : _haltTime" line28="    }" line29="" line30="    export function endGame() {" line31="        controlDisabled = true" line32="        playerSprite.setFlag(SpriteFlag.Ghost, true)" line33="        _status = STATUS.ENDGAME" line34="        _haltTime = game.runtime() - currentTimelineTimeStamp" line35="" line36="        freezeEverything()" line37="" line38="        game.showLongText(&quot;Retreat before it's too late&quot;, DialogLayout.Bottom)" line39="        currentPlayerActivityLogger.push(ActionList.DESTROY, game.runtime() - currentTimelineTimeStamp)" line40="        storedPlayerActivities.push(currentPlayerActivityLogger)" line41="" line42="        animation.runImageAnimation(playerSprite, assets.animation`TimeWrapAnim`)" line43="" line44="        playerSprite.say(&quot;Opening wormhole to another timeline&quot;, 3000)" line45="        playerSprite.vx = 0" line46="        playerSprite.vy = 0" line47="" line48="       " line49="" line50="        playerSprite.lifespan = 3000" line51="" line52="    }" line53="" line54="    function overlapHandle() {" line55="        sprites.onOverlap(SpriteKind.Player, SpriteKind.EnemyProjectile, function(sprite: Sprite, otherSprite: Sprite) {" line56="            endGame()" line57="        })" line58="        sprites.onOverlap(SpriteKind.Player, SpriteKind.Shark, function(sprite: Sprite, otherSprite: Sprite) {" line59="            endGame()" line60="        })" line61="" line62="        sprites.onOverlap(SpriteKind.Projectile, SpriteKind.Shark, function(sprite: Sprite, otherSprite: Sprite) {" line63="            if (_status == STATUS.ENDGAME) {" line64="                return " line65="            }" line66="" line67="            otherSprite.startEffect(effects.spray, 200)" line68="            sprite.destroy()" line69="            if(shark.takeDamage(1)){" line70="                _haltTime = game.runtime()" line71="                game.showLongText(&quot;You've save us all, at &quot; + destroyedUniverse + &quot; universe(s)'s cost&quot;, DialogLayout.Bottom)" line72="                game.over(true)" line73="            }" line74="        })" line75="    }" line76="" line77="    function bindControl() {" line78="        controlDisabled = false;" line79="" line80="        controller.up.onEvent(ControllerButtonEvent.Pressed, function() {" line81="            if (controlDisabled) {" line82="                return" line83="            }" line84="            currentPlayerActivityLogger.push(ActionList.UP, game.runtime() - currentTimelineTimeStamp)" line85="            playerSprite.vy = -50" line86="            playerSprite.vx = 0" line87="        })" line88="        controller.down.onEvent(ControllerButtonEvent.Pressed, function() {" line89="            if (controlDisabled) {" line90="                return" line91="            }" line92="            currentPlayerActivityLogger.push(ActionList.DOWN, game.runtime() - currentTimelineTimeStamp)" line93="            playerSprite.vy = 50" line94="            playerSprite.vx = 0" line95="        })" line96="        controller.left.onEvent(ControllerButtonEvent.Pressed, function() {" line97="            if (controlDisabled) {" line98="                return" line99="            }" line100="            currentPlayerActivityLogger.push(ActionList.LEFT, game.runtime() - currentTimelineTimeStamp)" line101="            playerSprite.vy = 0" line102="            playerSprite.vx = -50" line103="        })" line104="        controller.right.onEvent(ControllerButtonEvent.Pressed, function() {" line105="            if (controlDisabled) {" line106="                return" line107="            }" line108="            currentPlayerActivityLogger.push(ActionList.RIGHT, game.runtime() - currentTimelineTimeStamp)" line109="            playerSprite.vy = 0" line110="            playerSprite.vx = 50" line111="        })" line112="        controller.B.onEvent(ControllerButtonEvent.Pressed, function() {" line113="            hud.toggleHud()" line114="            shark.toggleBossHp()" line115="        })" line116="    }" line117="" line118="    function dumpActivities(activities:ActionTimestamp[]) {" line119="        let log = &quot;&quot;" line120="        for (let activity of activities) {" line121="            log += activity.timestamp + &quot;:&quot; + activity.action + &quot;;&quot;" line122="        }" line123="        console.log(log)" line124="    }" line125="" line126="    function summonPlayersInOtherTimeline() {" line127="        playersInOtherTimeline = []" line128="        for (let storedPlayerActivity of storedPlayerActivities) {" line129="            playersInOtherTimeline.push(new TimeTravelPlayer(storedPlayerActivity))" line130="        }" line131="    }" line132="" line133="    class MoveHandler {" line134="        private currentActionIndice:number[]" line135="        private currentTimelineTimeStamp:number" line136="        static INSTANCE = new MoveHandler()" line137="" line138="        reset(currentTimelineTimeStamp: number, length:number) {" line139="            this.currentActionIndice = []" line140="            this.currentTimelineTimeStamp = currentTimelineTimeStamp" line141="            for (let i = 0 ; i &lt; length; i++) {" line142="                this.currentActionIndice.push(0)" line143="            }" line144="        }" line145="" line146="        serve() {" line147="            game.onUpdate(() =&gt;  {" line148="                if (_status == STATUS.ENDGAME) {" line149="                    return " line150="                }" line151="" line152="" line153="                let delta2 = game.runtime() - this.currentTimelineTimeStamp" line154="                for (let k = 0 ; k &lt; playersInOtherTimeline.length; k++) {" line155="                    let anotherPlayer = playersInOtherTimeline[k]" line156="                    while (this.currentActionIndice[k] &lt; anotherPlayer.activities.length " line157="                        &amp;&amp; anotherPlayer.activities[this.currentActionIndice[k]].timestamp &lt; delta2) {" line158="                        let action2 = anotherPlayer.activities[this.currentActionIndice[k]].action" line159="                        switch(action2) {" line160="                            case ActionList.UP: " line161="                                anotherPlayer.up() " line162="                                break;" line163="                            case ActionList.DOWN: " line164="                                anotherPlayer.down() " line165="                                break;" line166="                            case ActionList.LEFT: " line167="                                anotherPlayer.left() " line168="                                break;" line169="                            case ActionList.RIGHT: " line170="                                anotherPlayer.right() " line171="                                break;" line172="                            case ActionList.DESTROY: " line173="                                anotherPlayer.destroy(destroyedUniverse &lt;= 2) " line174="                                break;" line175="                        }" line176="                        this.currentActionIndice[k] = this.currentActionIndice[k] + 1" line177="                    }" line178="                }" line179="            })" line180="        }" line181="    }" line182="" line183="    function moveHandler(initHandler:boolean) {" line184="        MoveHandler.INSTANCE.reset(currentTimelineTimeStamp, playersInOtherTimeline.length)" line185="        if (initHandler) {" line186="            MoveHandler.INSTANCE.serve()" line187="        }" line188="    }" line189="    " line190="    function attackHandler() {" line191="        game.onUpdateInterval(500, function() {" line192="            if (engine.status() == STATUS.NORMAL) {" line193="                for (let anotherPlayer22 of playersInOtherTimeline) {" line194="                    anotherPlayer22.fire()" line195="                }" line196="                sprites.createProjectileFromSprite(assets.image`PlayerProjectiles`, playerSprite, 100, 0)" line197="            }        " line198="        })" line199="    }" line200="" line201="    function freezeAllOfKind(kind:number) {" line202="        for (let sprite of sprites.allOfKind(kind)) {" line203="            sprite.vx = 0" line204="            sprite.vy = 0" line205="        }" line206="    }" line207="" line208="    function freezeEverything() {" line209="        freezeAllOfKind(SpriteKind.Player)" line210="        freezeAllOfKind(SpriteKind.Shark)" line211="        freezeAllOfKind(SpriteKind.Projectile)" line212="        freezeAllOfKind(SpriteKind.EnemyProjectile)" line213="        freezeAllOfKind(SpriteKind.Explosion)" line214="        freezeAllOfKind(SpriteKind.TimeTravelPlayer)" line215="    }" line216="" line217="    export function restartGame() {" line218="        currentPlayerActivityLogger = new StoredPlayerActivity()" line219="        currentTimelineTimeStamp = game.runtime()" line220="        playerSprite = sprites.create(assets.image`CurrentTimelineSpaceship`, SpriteKind.Player)" line221="" line222="        playerSprite.x = 32" line223="        playerSprite.z = 100" line224="        playerSprite.setFlag(SpriteFlag.StayInScreen, true)" line225="        bindControl()" line226="        summonPlayersInOtherTimeline()" line227="" line228="        playerSprite.onDestroyed(function() {" line229="            destroyedUniverse++" line230="            " line231="            cubicbird.destroyAllSpriteOfKind(SpriteKind.Player)" line232="            cubicbird.destroyAllSpriteOfKind(SpriteKind.Shark)" line233="            cubicbird.destroyAllSpriteOfKind(SpriteKind.Projectile)" line234="            cubicbird.destroyAllSpriteOfKind(SpriteKind.EnemyProjectile)" line235="            cubicbird.destroyAllSpriteOfKind(SpriteKind.Explosion)" line236="            cubicbird.destroyAllSpriteOfKind(SpriteKind.TimeTravelPlayer)" line237="            cubicbird.destroyAllSpriteOfKind(SpriteKind.SPRITE_KIND_ANIMATION_DUMMY)" line238="" line239="            restartGame()   " line240="        })" line241="" line242="        moveHandler(!init)        " line243="        shark.spawnBoss(playerSprite, !init)" line244="        hud.resetTime(destroyedUniverse+1)" line245="" line246="        if (!init) {" line247="            overlapHandle()" line248="            attackHandler()" line249="" line250="            init = true" line251="        }" line252="        " line253="        _haltTime = -1" line254="        _status = STATUS.NORMAL" line255="" line256="    }" line257="}" numlines="258"></mutation><next><block type="typescript_statement" id="Y?R**:hmH_lZHM6?eVmX" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="attackEffect.onLaserHit(SpriteKind.Player, function(sprite: Sprite) {" line1="    engine.endGame()    " line2="})" numlines="3"></mutation><next><block type="typescript_statement" id="|TT!jxPWna}.@mHdH$wh" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="attackEffect.onExplosionHit(SpriteKind.Player, function(sprite: Sprite) {" line1="    engine.endGame()   " line2="})" numlines="3"></mutation><next><block type="palettesetmonochrome" id=".FQTOzS[YKA.Hv]HlB{8"><next><block type="typescript_statement" id="5){c-1?E?:?[sr7HBBQ_" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="engine.restartGame()" numlines="1"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>